/*
  © 2010 Intel Corporation
*/

// pci_camera.dml - Skeleton code to base new DML device modules on

dml 1.4;

device pci_camera;

param desc = "PCI camera";

param documentation = "A device that takes a picture similar to a camera and is connected via PCI to a driver that shares the taken picture";

//Importar funcionalidades básicas de pci

import "utility.dml";


header %{
    #include <stdio.h>
    #include <stdlib.h>
%}

//Definición de funciones C para la manipulación de archivos
extern FILE * fopen(const char *, const char *);
extern int fgetc(FILE *);
extern int fclose(FILE *);
extern typedef struct { } FILE;

import "pci/common.dml";
is pci_device;

session FILE * file;

param pci_hotplug = true;

attribute int_attr is uint64_attr "An integer attribute";

/*
    simulates input data received by the device
    recieves a path to the file that will be populate in this device registers
*/

attribute input
{
    param type = "s"; //Input es un string
    session char* val; //Valor
    session int len; //Largo del archivo

    method get()->(attr_value_t) default
    {
        return SIM_make_attr_string(val);
    }

    method set(attr_value_t attr) throws default
    {
        local const char* attr_str = SIM_attr_string(attr);
        set_string(attr_str);
    }

    method set_string(const char* ptr)
    {
        if(len > 0) {delete val;}
        len = strlen(ptr);
        val = new char[len + 1];
        strcpy(val, ptr);
    }
}


bank pci_config {

    /* This attribute should contain a list of all BAR registers */
    param base_address_registers = ["base_address_0"];
 
    register vendor_id { param init_val = 0x104C; } // Texas Instruments
    register device_id { param init_val = 0x0DDE; } // PC Card Controller (0xAC10). Camera is 0X0DDE

    register base_address_0 @ 0x10 is (memory_base_address_32) {
        param size_bits = 8;//File_size
        param map_func = 1;
    }
    
}


bank regs is function_mapped_bank{
    /* Each register bank need to have a unique function number,
    which should match with the map_func param in one BAR */
    param function = 1;

    param register_size = 4;

    register version @ 0x0010 "Major and minor version"{
        is read_only;
        param init_val = 0x4711;
    }

    register cmd size 4 @0x0014{
        param init_val = 0;
        is write;
        
        method write(uint64 value){
            local int idx = 0;
            if(value == 0x1){
                if(input.val != NULL)
                {
                    file = fopen(input.val, "r");

                    for(idx = 0; idx < 256; idx++)
                    {
                        local uint8 char_read = fgetc(file);
                        buffer[idx].set_val(char_read);
                        log info, 4: "loaded val = 0x%x @ buffer[%d]", char_read, idx;
                    }
                    fclose(file);
                }
            }
        }
    }
    // DDE pci_camera registros
    register device_state       @0x0018;
    register filter_negative    @0x001C;
    register smooth_filter      @0x0020;

    register buffer[i < 256] size 1 @ 0x002C + i {
        is read;
        param init_val = 0;
    }
}
