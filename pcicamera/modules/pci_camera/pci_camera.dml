/*
  Device PCI data capture
  This simulated PCI device recieves a file path in the attribute and displays the
  first 8 bytes of the attribute file as a parameter.

  This Software is part of Simics. The rights to copy, distribute,
  modify, or otherwise make use of this Software may be licensed only
  pursuant to the terms of an applicable license agreement.
  
  Copyright 2010-2021 Intel Corporation

*/

dml 1.4;

device pci_camera;
import "utility.dml";
param desc = "PCI camera";
param documentation = "A device that takes a picture similar to a camera and is connected via PCI to a driver that shares the taken picture";


header %{
    #include <stdio.h>
    #include <stdlib.h>
%}

//Definición de funciones C para la manipulación de archivos
extern FILE * fopen(const char *, const char *);
extern int fgetc(FILE *);
extern int fclose(FILE *);
extern typedef struct { } FILE;





import "pci/common.dml";
is pci_device;


param pci_hotplug = true;

//Size of buffer
param BUFFER_SIZE = 256;

//Variable with the file handle
session FILE * file;






attribute input{
	param type = "s";
	session char* val;
	session int len;
	//get handler, gets called with called from CLI or get interface
    method get() -> (attr_value_t) default {
        return SIM_make_attr_string(val != NULL ? val : "");
    
    }
	
	//set handler, gets called with called from CLI or the set interface
	method set(attr_value_t attr) throws default {
		local const char* attr_str = SIM_attr_string(attr);
		set_string(attr_str);
		
	}
	
	
	
	
	
    method set_string(const char *ptr) {
        if (len > 0) {delete val;}
        len = strlen(ptr);
        val = new char[len + 1];
        strcpy(val, ptr);
    }
}


bank pci_config {

    /* This attribute should contain a list of all BAR registers */
    param base_address_registers = ["base_address_0"];

    register vendor_id { param init_val = 0x104C; } // Texas Instruments
    register device_id { param init_val = 0xAC10; } // PC Card Controller

    register base_address_0 @ 0x10 is (memory_base_address_32) {
        param size_bits = 18;
        param map_func = 1;
    }
    register base_address_1 @ 0x14 is (no_base_address_32);
    register base_address_2 @ 0x18 is (no_base_address_32);
    register base_address_3 @ 0x1C is (no_base_address_32);
   	register base_address_4 @ 0x20 is (no_base_address_32);
   	register base_address_5 @ 0x24 is (no_base_address_32);
}

bank regs is function_mapped_bank {
    /* Each register bank need to have a unique function number,
       which should match with the map_func param in one BAR */
    param function = 1;

    register Buffer_Size size 4 @ 0x0 { //Buffer size that ddefines the size of the bufffer. Used to be Status of the device
        is read_only;
        param init_val = 256;
        /*0x0: Dispositivo Apagado
        0x1: Dispositivo Encendido
        0x2: Dispositivo aplicando filtro
        0x3: Dispositivo tiene un error
        */
    }

    register file_size size 4 @ 0x4 { // Size of the file
        is write;
        param init_val = 0x0;
    }

    //when command register is written with a 1 then the device outputs current data 
    //stored in the input attribute
    // This register will be later modified to help write the bytes of the bmp archive to the buffer.
    register cmd size 4 @ 0x8 {
        is write;
        param init_val = 0x0;
        
        //called on write by the processor
        method write(uint64 value) {
            local uint32 index = 0;
            if (value == 0x1) {
                if(input.val != NULL) {
                    file = fopen(input.val, "r");
                    for (index = 0; index < BUFFER_SIZE; index++) {
                        local uint8 char_read = fgetc(file);
                        buffer[index].set_val(char_read);
                        log info, 4: "loaded val = 0x%x @ buffer[%d]", char_read, index;
                    }
                    fclose(file);
		        }
            }
        }
    }
    
    // for communicating initial 8 bytes of the file after command=1 and input attr value is populated
    // this register is going to be used to store the bytes of the bmp archive
    register buffer[i < BUFFER_SIZE] size 1 @ 0x12 + i {
        is read_only;
        param init_val = 0x0;
    }
}
